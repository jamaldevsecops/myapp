pipeline {
    agent {
        label 'BUILD-SERVER1-192.168.20.211'
    }

    environment {
        CONTAINER_NAME        = "myapp"
        DOCKER_FILENAME       = "Dockerfile"
        DOCKER_HUB_USERNAME   = "jamaldevsecops"
        DOCKER_CREDENTIALS_ID = "PersonalDockerHubAccessToken"
        RECIPIENT_EMAILS      = "jamal.devsecops@gmail.com"
    }

    stages {
        stage('üì• Checkout') {
            steps {
                checkout scm
                sh 'git fetch --tags'
            }
        }

        stage('üî¢ Determine Next Semantic Version') {
            steps {
                script {
                    // Fetch latest tags
                    sh 'git fetch --tags'

                    // Get latest tag, fallback to v0.0.0
                    def latestTag = sh(returnStdout: true, script: "git describe --tags --abbrev=0 || echo v0.0.0").trim()
                    echo "Latest Git tag: ${latestTag}"

                    // Parse version
                    def versionNumbers = latestTag.replaceFirst(/^v/, '').split('\\.')
                    def major = versionNumbers[0].toInteger()
                    def minor = versionNumbers[1].toInteger()
                    def patch = versionNumbers[2].toInteger()

                    // Bump patch
                    patch += 1
                    env.IMAGE_TAG = "v${major}.${minor}.${patch}"
                    echo "Next version: ${env.IMAGE_TAG}"

                    // Push tag securely using your GitHub token
                    withCredentials([string(credentialsId: 'GitHub-PAT', variable: 'GIT_TOKEN')]) {
                        sh """
                            git config user.email "ci-bot@company.com"
                            git config user.name "CI Bot"
                            git tag ${env.IMAGE_TAG}
                            git push https://$GIT_TOKEN@github.com/jamaldevsecops/myapp.git ${env.IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('üîß Build & Push Docker Image') {
            steps {
                script {
                    docker.withRegistry("https://index.docker.io/v1/", env.DOCKER_CREDENTIALS_ID) {
                        def imageName = "${env.DOCKER_HUB_USERNAME}/${env.CONTAINER_NAME}:${env.IMAGE_TAG}"
                        echo "üîß Building Docker image: ${imageName}"
                        def app = docker.build(imageName, "-f ${env.DOCKER_FILENAME} .")

                        echo "üì§ Pushing Docker image..."
                        app.push()
                        app.push("latest") // optional: push latest tag
                        env.DOCKER_IMAGE = imageName

                        // Capture digest for report
                        env.DOCKER_DIGEST = sh(returnStdout: true, script: "docker inspect --format='{{index .RepoDigests 0}}' ${imageName}").trim()
                        echo "‚úÖ Docker image pushed: ${env.DOCKER_IMAGE} (${env.DOCKER_DIGEST})"
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                emailext(
                    subject: "‚úÖ [SUCCESS] Build Report: ${env.CONTAINER_NAME} üöÄ",
                    body: """
                        <p><strong>Build Status:</strong> SUCCESS</p>
                        <p><strong>Docker Image:</strong> ${env.DOCKER_IMAGE}</p>
                        <p><strong>Digest:</strong> ${env.DOCKER_DIGEST}</p>
                        <p><strong>Git Tag:</strong> ${env.IMAGE_TAG}</p>
                        <p>The Docker image has been successfully built, tagged, and pushed to DockerHub.</p>
                    """,
                    mimeType: 'text/html',
                    to: "${env.RECIPIENT_EMAILS}",
                    attachLog: true
                )
            }
        }

        failure {
            script {
                emailext(
                    subject: "‚ùå [FAILURE] Build Report: ${env.CONTAINER_NAME} üí•",
                    body: """
                        <p><strong>Build Status:</strong> FAILED</p>
                        <p><strong>Docker Image Attempted:</strong> ${env.CONTAINER_NAME}:${env.IMAGE_TAG}</p>
                        <p>Please review the Jenkins logs for details.</p>
                    """,
                    mimeType: 'text/html',
                    to: "${env.RECIPIENT_EMAILS}",
                    attachLog: true
                )
            }
        }
    }
}
