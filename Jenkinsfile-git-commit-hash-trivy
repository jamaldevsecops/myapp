pipeline {
    agent {
        label 'BUILD-SERVER'
    }

    parameters {
        string(name: 'OVERRIDE_TAG', defaultValue: '', description: 'Optional: override auto-generated image tag')
    }

    environment {
        CONTAINER_NAME        = "myapp"
        DOCKER_FILENAME       = "Dockerfile"
        DOCKER_HUB_USERNAME   = "jamaldevsecops"
        DOCKER_CREDENTIALS_ID = "PersonalDockerHubAccessToken"
        RECIPIENT_EMAILS      = "jamal.devsecops@gmail.com"
    }

    stages {
        stage('üì• Checkout') {
            steps {
                echo "üì• Checking out source code..."
                checkout scm
                script {
                    sh 'git fetch --tags'
                    def gitTag = sh(returnStdout: true, script: "git describe --tags --abbrev=0 || echo ''").trim()
                    def commitHash = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()

                    if (params.OVERRIDE_TAG?.trim()) {
                        env.IMAGE_TAG = params.OVERRIDE_TAG
                    } else if (gitTag) {
                        env.IMAGE_TAG = gitTag.startsWith('v') ? gitTag.substring(1) : gitTag
                    } else {
                        env.IMAGE_TAG = commitHash
                    }

                    env.GIT_COMMIT_HASH = commitHash
                    env.GIT_BRANCH = sh(returnStdout: true, script: "git rev-parse --abbrev-ref HEAD").trim()
                }
            }
        }

        stage('üîß Build & Push Docker Image') {
            steps {
                script {
                    docker.withRegistry("https://index.docker.io/v1/", env.DOCKER_CREDENTIALS_ID) {
                        def imageName = "${env.DOCKER_HUB_USERNAME}/${env.CONTAINER_NAME}:${env.IMAGE_TAG}"
                        echo "üîß Building Docker image: ${imageName}"
                        def app = docker.build(imageName, "-f ${env.DOCKER_FILENAME} .")

                        echo "üì§ Pushing Docker image..."
                        app.push()
                        app.push("latest")
                        env.DOCKER_IMAGE = imageName

                        env.DOCKER_DIGEST = sh(returnStdout: true, script: "docker inspect --format='{{index .RepoDigests 0}}' ${imageName}").trim()
                    }
                }
            }
        }

        stage('üõ°Ô∏è Trivy Image Scan') {
            steps {
                script {
                    // Run Trivy and save reports
                    sh """
                        trivy image --exit-code 0 --severity LOW,MEDIUM,HIGH,CRITICAL --format table -o trivy-report.txt ${env.DOCKER_IMAGE}
                        trivy image --exit-code 0 --severity LOW,MEDIUM,HIGH,CRITICAL --format json -o trivy-report.json ${env.DOCKER_IMAGE}
                    """

                    // Parse JSON safely in Jenkins sandbox
                    def jsonText = readFile('trivy-report.json')
                    def jsonSlurper = new groovy.json.JsonSlurper()
                    def json = jsonSlurper.parseText(jsonText)

                    // Initialize severity counters
                    def severityCount = [CRITICAL:0, HIGH:0, MEDIUM:0, LOW:0]
                    json.each { entry ->
                        def result = entry.value
                        def vulns = result['Vulnerabilities']
                        if (vulns != null) {
                            vulns.each { vuln ->
                                def sev = vuln['Severity']?.toUpperCase()
                                if (severityCount.containsKey(sev)) {
                                    severityCount[sev] += 1
                                }
                            }
                        }
                    }
                    env.CRITICAL = severityCount.CRITICAL.toString()
                    env.HIGH     = severityCount.HIGH.toString()
                    env.MEDIUM   = severityCount.MEDIUM.toString()
                    env.LOW      = severityCount.LOW.toString()

                    echo "‚úÖ Trivy scan completed. Critical:${env.CRITICAL}, High:${env.HIGH}, Medium:${env.MEDIUM}, Low:${env.LOW}"
                }
            }
        }
    }

    post {
        always {
            script {
                emailext(
                    subject: "üõ°Ô∏è Trivy Security Scan Report: ${env.CONTAINER_NAME}:${env.IMAGE_TAG}",
                    body: """
                        <html>
                        <body style="font-family: Arial, sans-serif; color: #333;">
                            <h2 style="color: #2F4F4F;">Trivy Security Scan Report</h2>
                            <table border="1" cellpadding="6" cellspacing="0" style="border-collapse: collapse; font-size: 14px;">
                                <tr><td><strong>Docker Image</strong></td><td>${env.DOCKER_IMAGE}</td></tr>
                                <tr><td><strong>Digest</strong></td><td>${env.DOCKER_DIGEST}</td></tr>
                                <tr><td><strong>Git Branch</strong></td><td>${env.GIT_BRANCH}</td></tr>
                                <tr><td><strong>Git Commit</strong></td><td>${env.GIT_COMMIT_HASH}</td></tr>
                                <tr><td><strong>Critical Vulns</strong></td><td>${env.CRITICAL}</td></tr>
                                <tr><td><strong>High Vulns</strong></td><td>${env.HIGH}</td></tr>
                                <tr><td><strong>Medium Vulns</strong></td><td>${env.MEDIUM}</td></tr>
                                <tr><td><strong>Low Vulns</strong></td><td>${env.LOW}</td></tr>
                            </table>
                            <p style="margin-top: 15px;">Attached: trivy-report.txt</p>
                        </body>
                        </html>
                    """,
                    mimeType: 'text/html',
                    to: "${env.RECIPIENT_EMAILS}",
                    attachLog: true,
                    attachmentsPattern: 'trivy-report.txt'
                )
            }
        }
    }
}
