// Jenkinsfile: Build Docker Image + Trivy Scan + Vulnerability Summary Email (Sandbox-safe)
pipeline {
    agent {
        label 'BUILD-SERVER'
    }

    parameters {
        string(name: 'OVERRIDE_TAG', defaultValue: '', description: 'Optional: override auto-generated image tag')
    }

    environment {
        CONTAINER_NAME        = "myapp"
        DOCKER_FILENAME       = "Dockerfile"
        DOCKER_HUB_USERNAME   = "jamaldevsecops"
        DOCKER_CREDENTIALS_ID = "PersonalDockerHubAccessToken"
        RECIPIENT_EMAILS      = "jamal.devsecops@gmail.com"
    }

    stages {
        stage('üì• Checkout') {
            steps {
                echo "üì• Checking out source code..."
                checkout scm
                script {
                    sh 'git fetch --tags'

                    def gitTag = sh(returnStdout: true, script: "git describe --tags --abbrev=0 || echo ''").trim()
                    def commitHash = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()

                    if (params.OVERRIDE_TAG?.trim()) {
                        env.IMAGE_TAG = params.OVERRIDE_TAG
                        echo "üîñ Using override tag: ${env.IMAGE_TAG}"
                    } else if (gitTag) {
                        env.IMAGE_TAG = gitTag.startsWith('v') ? gitTag.substring(1) : gitTag
                        echo "üîñ Using Git tag as image tag: ${env.IMAGE_TAG}"
                    } else {
                        env.IMAGE_TAG = commitHash
                        echo "üîñ No Git tag found. Using commit hash as image tag: ${env.IMAGE_TAG}"
                    }

                    env.GIT_COMMIT_HASH = commitHash
                    env.GIT_BRANCH = sh(returnStdout: true, script: "git rev-parse --abbrev-ref HEAD").trim()
                }
            }
        }

        stage('üîß Build & Push Docker Image') {
            steps {
                script {
                    docker.withRegistry("https://index.docker.io/v1/", env.DOCKER_CREDENTIALS_ID) {
                        def imageName = "${env.DOCKER_HUB_USERNAME}/${env.CONTAINER_NAME}:${env.IMAGE_TAG}"
                        echo "üîß Building Docker image: ${imageName}"
                        def app = docker.build(imageName, "-f ${env.DOCKER_FILENAME} .")

                        echo "üì§ Pushing Docker image..."
                        app.push()
                        app.push("latest")
                        env.DOCKER_IMAGE = imageName

                        env.DOCKER_DIGEST = sh(returnStdout: true, script: "docker inspect --format='{{index .RepoDigests 0}}' ${imageName}").trim()
                        echo "‚úÖ Docker image pushed: ${env.DOCKER_IMAGE} (${env.DOCKER_DIGEST})"
                    }
                }
            }
        }

        stage('üîç Trivy Image Scan') {
            steps {
                script {
                    echo "üîç Scanning Docker image for vulnerabilities..."

                    // Generate table + JSON reports
                    sh '''
                        trivy image --exit-code 0 --severity LOW,MEDIUM,HIGH,CRITICAL --format table -o trivy-report.txt $DOCKER_IMAGE
                        trivy image --exit-code 0 --severity LOW,MEDIUM,HIGH,CRITICAL --format json -o trivy-report.json $DOCKER_IMAGE
                        echo "‚úÖ Trivy scan completed. Reports saved: trivy-report.txt, trivy-report.json"
                    '''

                    // Read first 10 lines of table report for email
                    def lines = readFile('trivy-report.txt').split('\n')
                    def first10 = []
                    for (int i = 0; i < Math.min(10, lines.size()); i++) {
                        first10.add(lines[i])
                    }
                    env.TRIVY_SUMMARY = first10.join('<br>')

                    // Parse JSON report for severity summary (sandbox-safe)
                    def jsonText = readFile('trivy-report.json')
                    def json = new groovy.json.JsonSlurper().parseText(jsonText)

                    def severityCount = [LOW:0, MEDIUM:0, HIGH:0, CRITICAL:0]

                    json.each { result ->
                        def vulns = result.get('Vulnerabilities')  // <-- safe access
                        if (vulns != null) {
                            vulns.each { vuln ->
                                def sev = vuln.get('Severity')?.toUpperCase()
                                if (severityCount.containsKey(sev)) {
                                    severityCount[sev] += 1
                                }
                            }
                        }
                    }

                    env.TRIVY_SEVERITY_SUMMARY = """
                        LOW: ${severityCount.LOW}, 
                        MEDIUM: ${severityCount.MEDIUM}, 
                        HIGH: ${severityCount.HIGH}, 
                        CRITICAL: ${severityCount.CRITICAL}
                    """
                }
            }
        }
    }

    post {
        success {
            script {
                emailext(
                    subject: "‚úÖ [SUCCESS] Build Report: ${env.CONTAINER_NAME} üöÄ",
                    body: """
                        <html>
                        <body style="font-family: Arial, sans-serif; color: #333;">
                            <h2 style="color: green;">‚úÖ Build Succeeded</h2>
                            <table border="1" cellpadding="6" cellspacing="0" style="border-collapse: collapse; font-size: 14px;">
                                <tr><td><strong>Docker Image</strong></td><td>${env.DOCKER_IMAGE}</td></tr>
                                <tr><td><strong>Digest</strong></td><td>${env.DOCKER_DIGEST}</td></tr>
                                <tr><td><strong>Git Branch</strong></td><td>${env.GIT_BRANCH}</td></tr>
                                <tr><td><strong>Git Commit</strong></td><td>${env.GIT_COMMIT_HASH}</td></tr>
                            </table>

                            <h3 style="margin-top: 15px;">üîç Trivy Vulnerability Summary (first 10 lines)</h3>
                            <p style="font-family: monospace; background-color: #f5f5f5; padding: 10px; border-radius: 5px;">
                                ${env.TRIVY_SUMMARY ?: 'No vulnerabilities found.'}
                            </p>

                            <h3 style="margin-top: 15px;">üìä Severity Counts</h3>
                            <p style="font-family: monospace; background-color: #eef2f7; padding: 10px; border-radius: 5px;">
                                ${env.TRIVY_SEVERITY_SUMMARY}
                            </p>

                            <p style="margin-top: 15px;">The Docker image has been successfully built, pushed, and scanned with Trivy.</p>
                        </body>
                        </html>
                    """,
                    mimeType: 'text/html',
                    to: "${env.RECIPIENT_EMAILS}",
                    attachLog: true,
                    attachmentsPattern: 'trivy-report.*'
                )
            }
        }

        failure {
            script {
                emailext(
                    subject: "‚ùå [FAILURE] Build Report: ${env.CONTAINER_NAME} üí•",
                    body: """
                        <html>
                        <body style="font-family: Arial, sans-serif; color: #333;">
                            <h2 style="color: red;">‚ùå Build Failed</h2>
                            <table border="1" cellpadding="6" cellspacing="0" style="border-collapse: collapse; font-size: 14px;">
                                <tr><td><strong>Image Attempted</strong></td><td>${env.CONTAINER_NAME}:${env.IMAGE_TAG}</td></tr>
                                <tr><td><strong>Git Branch</strong></td><td>${env.GIT_BRANCH ?: 'N/A'}</td></tr>
                                <tr><td><strong>Git Commit</strong></td><td>${env.GIT_COMMIT_HASH ?: 'N/A'}</td></tr>
                            </table>
                            <p style="margin-top: 15px;">Please review the Jenkins logs for details.</p>
                        </body>
                        </html>
                    """,
                    mimeType: 'text/html',
                    to: "${env.RECIPIENT_EMAILS}",
                    attachLog: true
                )
            }
        }
    }
}
