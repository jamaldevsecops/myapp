// Jenkinsfile: Build Docker Image with Automatic Tagging using Git Commit Hash
pipeline {
    agent {
        label 'BUILD-SERVER'
    }

    parameters {
        string(name: 'OVERRIDE_TAG', defaultValue: '', description: 'Optional: override auto-generated image tag')
    }

    environment {
        CONTAINER_NAME        = "myapp"
        DOCKER_FILENAME       = "Dockerfile"
        DOCKER_HUB_USERNAME   = "jamaldevsecops"
        DOCKER_CREDENTIALS_ID = "PersonalDockerHubAccessToken"
        RECIPIENT_EMAILS      = "jamal.devsecops@gmail.com"
    }

    stages {
        stage('üì• Checkout') {
            steps {
                echo "üì• Checking out source code..."
                checkout scm
                script {
                    sh 'git fetch --tags'

                    // Try to get the latest Git tag
                    def gitTag = sh(returnStdout: true, script: "git describe --tags --abbrev=0 || echo ''").trim()
                    def commitHash = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()

                    // Determine image tag
                    if (params.OVERRIDE_TAG?.trim()) {
                        env.IMAGE_TAG = params.OVERRIDE_TAG
                        echo "üîñ Using override tag: ${env.IMAGE_TAG}"
                    } else if (gitTag) {
                        env.IMAGE_TAG = gitTag.startsWith('v') ? gitTag.substring(1) : gitTag
                        echo "üîñ Using Git tag as image tag: ${env.IMAGE_TAG}"
                    } else {
                        env.IMAGE_TAG = commitHash
                        echo "üîñ No Git tag found. Using commit hash as image tag: ${env.IMAGE_TAG}"
                    }

                    env.GIT_COMMIT_HASH = commitHash
                    env.GIT_BRANCH = sh(returnStdout: true, script: "git rev-parse --abbrev-ref HEAD").trim()
                }
            }
        }

        stage('üîß Build & Push Docker Image') {
            steps {
                script {
                    docker.withRegistry("https://index.docker.io/v1/", env.DOCKER_CREDENTIALS_ID) {
                        def imageName = "${env.DOCKER_HUB_USERNAME}/${env.CONTAINER_NAME}:${env.IMAGE_TAG}"
                        echo "üîß Building Docker image: ${imageName}"
                        def app = docker.build(imageName, "-f ${env.DOCKER_FILENAME} .")

                        echo "üì§ Pushing Docker image..."
                        app.push()
                        app.push("latest") // Optional: also push 'latest'
                        env.DOCKER_IMAGE = imageName

                        // Capture digest for email/report
                        env.DOCKER_DIGEST = sh(returnStdout: true, script: "docker inspect --format='{{index .RepoDigests 0}}' ${imageName}").trim()
                        echo "‚úÖ Docker image pushed: ${env.DOCKER_IMAGE} (${env.DOCKER_DIGEST})"
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                emailext(
                    subject: "‚úÖ [SUCCESS] Build Report: ${env.CONTAINER_NAME} üöÄ",
                    body: """
                        <html>
                        <body style="font-family: Arial, sans-serif; color: #333;">
                            <h2 style="color: green;">‚úÖ Build Succeeded</h2>
                            <p><strong>Docker Image:</strong> ${env.DOCKER_IMAGE}</p>
                            <p><strong>Digest:</strong> ${env.DOCKER_DIGEST}</p>
                            <p><strong>Git Branch:</strong> ${env.GIT_BRANCH}</p>
                            <p><strong>Git Commit:</strong> ${env.GIT_COMMIT_HASH}</p>
                            <p>The Docker image has been successfully built and pushed to DockerHub.</p>
                        </body>
                        </html>
                    """,
                    mimeType: 'text/html',
                    to: "${env.RECIPIENT_EMAILS}",
                    attachLog: true
                )
            }
        }

        failure {
            script {
                emailext(
                    subject: "‚ùå [FAILURE] Build Report: ${env.CONTAINER_NAME} üí•",
                    body: """
                        <html>
                        <body style="font-family: Arial, sans-serif; color: #333;">
                            <h2 style="color: red;">‚ùå Build Failed</h2>
                            <p><strong>Image Attempted:</strong> ${env.CONTAINER_NAME}:${env.IMAGE_TAG}</p>
                            <p><strong>Git Branch:</strong> ${env.GIT_BRANCH ?: 'N/A'}</p>
                            <p><strong>Git Commit:</strong> ${env.GIT_COMMIT_HASH ?: 'N/A'}</p>
                            <p>Please review the Jenkins logs for details.</p>
                        </body>
                        </html>
                    """,
                    mimeType: 'text/html',
                    to: "${env.RECIPIENT_EMAILS}",
                    attachLog: true
                )
            }
        }
    }
}
