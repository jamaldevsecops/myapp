pipeline {
    agent {
        label 'BUILD-SERVER1-192.168.20.211'
    }

    environment {
        CONTAINER_NAME        = "myapp"
        IMAGE_TAG             = "latest"
        DOCKER_FILENAME       = "Dockerfile"
        DOCKER_HUB_USERNAME   = "jamaldevsecops"
        DOCKER_CREDENTIALS_ID = "PersonalDockerHubAccessToken"
        RECIPIENT_EMAILS      = "jamal.devsecops@gmail.com"

        // ‚Üì Add these for Kubernetes
        K8S_NAMESPACE             = "myapp"
        KUBECONFIG_CREDENTIALS_ID = "k8s"
        APP_NAME                  = "myapp"
    }

    stages {
        stage('üì• Checkout') {
            steps {
                echo "üì• Checking out source code..."
                checkout scm
            }
        }

        stage('üîß Build Docker Image') {
            steps {
                script {
                    try {
                        echo "üîß Starting Docker build for: ${env.CONTAINER_NAME}:${env.IMAGE_TAG}"
                        def image = "${env.DOCKER_HUB_USERNAME}/${env.CONTAINER_NAME}:${env.IMAGE_TAG}"
                        sh "docker build --no-cache -t ${image} -f ${DOCKER_FILENAME} ."
                        echo "‚úÖ Docker image built successfully: ${image}"
                        env.DOCKER_IMAGE = image
                    } catch (Exception e) {
                        error "‚ùå Failed to build Docker image: ${env.CONTAINER_NAME}:${env.IMAGE_TAG}. Error: ${e.message}"
                    }
                }
            }
        }

        stage('üì§ Push Docker Image') {
            steps {
                script {
                    echo "üì§ Logging in to DockerHub and pushing image..."
                    withCredentials([
                        usernamePassword(
                            credentialsId: env.DOCKER_CREDENTIALS_ID,
                            usernameVariable: 'DOCKER_USERNAME',
                            passwordVariable: 'DOCKER_PASSWORD'
                        )
                    ]) {
                        sh '''
                            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                        '''
                        sh "docker push ${env.DOCKER_IMAGE}"
                        echo "‚úÖ Docker image pushed to DockerHub: ${env.DOCKER_IMAGE}"
                        sh "docker logout"
                        echo "üö™ Logged out from DockerHub"
                    }
                }
            }
        }

        stage('üöÄ Deploy to Kubernetes') {
            steps {
                script {
                    withCredentials([file(credentialsId: env.KUBECONFIG_CREDENTIALS_ID, variable: 'KUBECONFIG')]) {
                        sh '''#!/bin/bash
                          set -euxo pipefail
                          # Check client and cluster connectivity
                          kubectl version --client=true
                          kubectl config current-context || true
        
                          # Ensure namespace exists
                          kubectl get ns ${K8S_NAMESPACE} || kubectl create ns ${K8S_NAMESPACE}
        
                          # First apply (idempotent): creates Deployment/Service if missing
                          if [ -d k8s ]; then
                            kubectl -n ${K8S_NAMESPACE} apply -f k8s/service.yaml
                            kubectl -n ${K8S_NAMESPACE} apply -f k8s/deployment.yaml
                            if [ -f k8s/ingress.yaml ]; then
                              kubectl -n ${K8S_NAMESPACE} apply -f k8s/ingress.yaml
                            fi
                          else
                            echo "k8s/ directory not found in repo"; exit 1
                          fi
        
                          # Update image to latest build
                          kubectl -n ${K8S_NAMESPACE} set image deployment/${APP_NAME} ${APP_NAME}=${DOCKER_IMAGE}
                          kubectl -n ${K8S_NAMESPACE} annotate deployment/${APP_NAME} \
                            kubernetes.io/change-cause="Deploy ${DOCKER_IMAGE} from Jenkins ${BUILD_URL}" --overwrite
                          kubectl -n ${K8S_NAMESPACE} rollout status deployment/${APP_NAME} --timeout=180s
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                emailext(
                    subject: "‚úÖ [SUCCESS] Build & Deploy: ${env.CONTAINER_NAME} üöÄ",
                    body: """
                        <p><strong>Status:</strong> SUCCESS</p>
                        <p><strong>Image:</strong> ${env.DOCKER_IMAGE}</p>
                        <p>Deployment to namespace <code>${env.K8S_NAMESPACE}</code> finished successfully.</p>
                    """,
                    mimeType: 'text/html',
                    to: "${env.RECIPIENT_EMAILS}",
                    attachLog: true
                )
            }
        }

        failure {
            script {
                // Try to capture some k8s diagnostics if deploy stage failed
                try {
                    withCredentials([file(credentialsId: env.KUBECONFIG_CREDENTIALS_ID, variable: 'KUBECONFIG')]) {
                        sh '''
                          set +e
                          echo "---- k8s diagnostics ----"
                          kubectl -n ${K8S_NAMESPACE} get deploy,rs,po -o wide
                          kubectl -n ${K8S_NAMESPACE} describe deploy ${APP_NAME} || true
                          POD=$(kubectl -n ${K8S_NAMESPACE} get pods -l app=${APP_NAME} -o jsonpath='{.items[0].metadata.name}' 2>/dev/null); \
                            [ -n "$POD" ] && kubectl -n ${K8S_NAMESPACE} logs --tail=200 "$POD" || true
                          kubectl -n ${K8S_NAMESPACE} get events --sort-by=.lastTimestamp | tail -n 50
                        '''
                    }
                } catch (ignored) {}
                emailext(
                    subject: "‚ùå [FAILURE] Build/Deploy: ${env.CONTAINER_NAME} üí•",
                    body: """
                        <p><strong>Status:</strong> FAILED</p>
                        <p><strong>Image:</strong> ${env.CONTAINER_NAME}:${env.IMAGE_TAG}</p>
                        <p>Please review the Jenkins logs for details.</p>
                    """,
                    mimeType: 'text/html',
                    to: "${env.RECIPIENT_EMAILS}",
                    attachLog: true
                )
            }
        }
    }
}
