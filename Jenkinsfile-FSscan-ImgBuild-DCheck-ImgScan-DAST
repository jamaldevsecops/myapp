pipeline {
    agent { label 'BUILD-SERVER' }

    parameters {
        string(name: 'OVERRIDE_TAG', defaultValue: '', description: 'Optional: override auto-generated image tag')
    }

    environment {
        CONTAINER_NAME        = "myapp"
        DOCKER_FILENAME       = "Dockerfile"
        DOCKER_HUB_USERNAME   = "jamaldevsecops"
        DOCKER_CREDENTIALS_ID = "PersonalDockerHubAccessToken"
        RECIPIENT_EMAILS      = "jamalhossain.devsecops@gmail.com"
        DEP_CHECK_NAME        = "OWASP-DC"   // Jenkins Global Tool Config name
        CONTAINER_PORT        = "3000"         // Internal app port exposed by container
        SLEEP_TIME            = "45"         // Time (in seconds) to keep app running for DAST scan
    }

    stages {

        stage('üì• Checkout') {
            steps {
                echo "üì• Checking out source code..."
                checkout scm
                script {
                    sh 'git fetch --tags'
                    def gitTag = sh(returnStdout: true, script: "git describe --tags --abbrev=0 || echo ''").trim()
                    def commitHash = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()

                    if (params.OVERRIDE_TAG?.trim()) {
                        env.IMAGE_TAG = params.OVERRIDE_TAG
                        echo "üîñ Using override tag: ${env.IMAGE_TAG}"
                    } else if (gitTag) {
                        env.IMAGE_TAG = gitTag.startsWith('v') ? gitTag.substring(1) : gitTag
                        echo "üîñ Using Git tag as image tag: ${env.IMAGE_TAG}"
                    } else {
                        env.IMAGE_TAG = commitHash
                        echo "üîñ No Git tag found. Using commit hash as image tag: ${env.IMAGE_TAG}"
                    }

                    env.GIT_COMMIT_HASH = commitHash
                    env.GIT_BRANCH = sh(returnStdout: true, script: "git rev-parse --abbrev-ref HEAD").trim()
                }
            }
        }

        stage('Trivy Filesystem Scan') {
            steps {
                script {
                    echo "üîç Running Trivy filesystem scan (source dependencies)..."
                    sh '''
                      mkdir -p reports
                      curl -sSL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -o html.tpl
                      trivy fs --exit-code 0 --severity LOW,MEDIUM,HIGH,CRITICAL --format json -o reports/trivy-fs-report.json .
                      trivy fs --format template --template @html.tpl -o reports/trivy-fs-report.html .
                    '''
                }
            }
            post {
                always {
                    echo "üì¶ Archiving Trivy FS reports..."
                    archiveArtifacts artifacts: 'reports/trivy-fs-report.*', fingerprint: true
                }
            }
        }

        stage('üîß Build & Push Docker Image') {
            steps {
                script {
                    def imageName = "${env.DOCKER_HUB_USERNAME}/${env.CONTAINER_NAME}:${env.IMAGE_TAG}"
                    docker.withRegistry("https://index.docker.io/v1/", env.DOCKER_CREDENTIALS_ID) {
                        echo "üîß Building Docker image: ${imageName}"
                        def app = docker.build(imageName, "-f ${env.DOCKER_FILENAME} .")
                        echo "üì§ Pushing Docker image..."
                        app.push()
                        app.push("latest")
                    }
                    env.DOCKER_IMAGE = imageName
                    env.DOCKER_DIGEST = sh(returnStdout: true, script: "docker inspect --format='{{index .RepoDigests 0}}' ${imageName}").trim()
                    echo "‚úÖ Docker image pushed: ${env.DOCKER_IMAGE} (${env.DOCKER_DIGEST})"
                }
            }
        }

        stage('üß© OWASP Dependency-Check') {
            steps {
                script {
                    echo "üîç Running OWASP Dependency-Check analysis..."
                    dependencyCheck additionalArguments: '--format XML --format HTML --enableExperimental',
                        odcInstallation: "${env.DEP_CHECK_NAME}"
                }
            }
            post {
                always {
                    echo "üì¶ Archiving Dependency-Check reports..."
                    archiveArtifacts artifacts: '*.xml,*.html', fingerprint: true
                    dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                }
            }
        }

        stage('üõ°Ô∏è Trivy Image Scan') {
            steps {
                script {
                    echo "üîç Running Trivy image scan..."
                    sh """
                        mkdir -p reports
                        curl -sSL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -o html.tpl
                        trivy image --exit-code 0 --severity LOW,MEDIUM,HIGH,CRITICAL --format json -o reports/trivy-image-report.json ${env.DOCKER_IMAGE}
                        trivy image --format template --template @html.tpl -o reports/trivy-image-report.html ${env.DOCKER_IMAGE}
                    """
                }
            }
            post {
                always {
                    echo "üì¶ Archiving Trivy Image reports..."
                    archiveArtifacts artifacts: 'reports/trivy-image-report.*', fingerprint: true
                }
            }
        }

        stage('üåê OWASP ZAP (DAST Scan)') {
            environment {
                ZAP_REPORT_BASE_DIR = "reports/zap"
                ZAP_IMAGE           = "zaproxy/zap-stable:latest"
                SLEEP_TIME          = "${SLEEP_TIME ?: 45}" // fallback 45s if not defined
                UNIQUE_ID           = "${env.BUILD_NUMBER}-${env.GIT_COMMIT_HASH.take(7)}"
            }
            steps {
                script {
                    echo "üåê Starting OWASP ZAP DAST Scan..."
        
                    def MAX_RETRIES = 3
                    def attempt = 1
                    def success = false
                    def HOST_PORT = ""
                    def CONTAINER_INSTANCE = ""
                    def ZAP_REPORT_DIR = "${ZAP_REPORT_BASE_DIR}-${UNIQUE_ID}"
                    def ZAP_REPORT_FILE = "zap-report-${UNIQUE_ID}.html"
        
                    // Ensure unique report directory
                    sh "mkdir -p ${ZAP_REPORT_DIR}"
        
                    // Select free host port and start container
                    while (attempt <= MAX_RETRIES && !success) {
                        echo "üîÅ Attempt #${attempt} to launch test container..."
        
                        HOST_PORT = sh(
                            returnStdout: true,
                            script: '''
                                for i in $(seq 3000 3999); do
                                    if ! sudo netstat -tuln | grep -q ":$i "; then
                                        echo $i
                                        break
                                    fi
                                done
                            '''
                        ).trim()
        
                        if (!HOST_PORT) {
                            error("‚ùå No free host port found between 3000‚Äì3999!")
                        }
        
                        CONTAINER_INSTANCE = "${env.CONTAINER_NAME}-${HOST_PORT}-${UNIQUE_ID}"
        
                        def runResult = sh(
                            returnStatus: true,
                            script: """
                                echo "üöÄ Launching test container: ${CONTAINER_INSTANCE} on port ${HOST_PORT}:${CONTAINER_PORT}"
                                docker run -d --rm --log-driver json-file --name ${CONTAINER_INSTANCE} \
                                    -p ${HOST_PORT}:${CONTAINER_PORT} ${env.DOCKER_IMAGE} > /dev/null 2>&1
                            """
                        )
        
                        if (runResult == 0) {
                            echo "‚úÖ Container started successfully on port ${HOST_PORT}"
                            success = true
                        } else {
                            echo "‚ö†Ô∏è Failed to start container on attempt #${attempt}. Retrying..."
                            attempt++
                            sleep 5
                        }
                    }
        
                    if (!success) {
                        error("‚ùå All attempts to start the container failed. Aborting ZAP scan.")
                    }
        
                    // Authenticate Docker and pull ZAP image
                    withCredentials([usernamePassword(credentialsId: env.DOCKER_CREDENTIALS_ID,
                                                     usernameVariable: 'DOCKER_USER',
                                                     passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                            echo "üîë Authenticating to Docker Hub..."
                            echo "\$DOCKER_PASS" | docker login -u "\$DOCKER_USER" --password-stdin || true
                            echo "üì• Pulling OWASP ZAP image..."
                            docker pull ${ZAP_IMAGE} || true
                        """
                    }
        
                    // Run ZAP Baseline Scan with unique report file and proper permissions
                    sh """
                        echo "‚è≥ Waiting ${SLEEP_TIME}s for app startup..."
                        sleep ${SLEEP_TIME}
        
                        echo "üîé Running OWASP ZAP baseline scan..."
                        docker run --rm \
                            --log-driver json-file \
                            -v \$(pwd)/${ZAP_REPORT_DIR}:/zap/wrk:rw \
                            --user $(id -u):$(id -g) \
                            --network host \
                            ${ZAP_IMAGE} zap-baseline.py -t http://localhost:${HOST_PORT} \
                            -r ${ZAP_REPORT_FILE} || true
        
                        docker stop ${CONTAINER_INSTANCE} || true
                    """
                }
            }
            post {
                always {
                    echo "üì¶ Archiving OWASP ZAP report..."
                    archiveArtifacts artifacts: "reports/zap-${UNIQUE_ID}/${ZAP_REPORT_FILE}", fingerprint: true
                }
            }
        }

    }

    post {
        always {
            script {
                sh 'ls -l reports/trivy-*.html reports/trivy-*.json dependency-check-report*.html dependency-check-report*.xml reports/zap/zap-report.html || true'

                emailext(
                    subject: "üõ°Ô∏è [Security Report] ${env.CONTAINER_NAME}:${env.IMAGE_TAG}",
                    body: """
                        <html>
                        <body style="font-family: Arial, sans-serif; color: #333;">
                            <h2 style="color: #2E86C1;">Security Report Summary</h2>
                            <table border="1" cellpadding="6" cellspacing="0" style="border-collapse: collapse; font-size: 14px;">
                                <tr><td><strong>Docker Image</strong></td><td>${env.DOCKER_IMAGE}</td></tr>
                                <tr><td><strong>Digest</strong></td><td>${env.DOCKER_DIGEST}</td></tr>
                                <tr><td><strong>Git Branch</strong></td><td>${env.GIT_BRANCH}</td></tr>
                                <tr><td><strong>Git Commit</strong></td><td>${env.GIT_COMMIT_HASH}</td></tr>
                            </table>
                            <p style="margin-top: 15px;">
                                <strong>Attached Reports:</strong><br>
                                ‚Ä¢ Trivy Filesystem Scan (HTML, JSON)<br>
                                ‚Ä¢ OWASP Dependency-Check (HTML, XML)<br>
                                ‚Ä¢ Trivy Image Scan (HTML, JSON)<br>
                                ‚Ä¢ OWASP ZAP DAST Scan (HTML)
                            </p>
                        </body>
                        </html>
                    """,
                    mimeType: 'text/html',
                    to: "${env.RECIPIENT_EMAILS}",
                    attachLog: true,
                    attachmentsPattern: 'reports/trivy-*.html,reports/trivy-*.json,dependency-check-report*.html,dependency-check-report*.xml,reports/zap/zap-report.html'
                )
            }
        }
    }
}
