pipeline {
    agent {
        label 'BUILD-SERVER'
    }

    parameters {
        string(name: 'OVERRIDE_TAG', defaultValue: '', description: 'Optional: override auto-generated image tag')
    }

    environment {
        CONTAINER_NAME        = "myapp"
        DOCKER_FILENAME       = "Dockerfile"
        DOCKER_HUB_USERNAME   = "jamaldevsecops"
        DOCKER_CREDENTIALS_ID = "PersonalDockerHubAccessToken"
        RECIPIENT_EMAILS      = "jamal.devsecops@gmail.com"
    }

    stages {
        stage('üì• Checkout') {
            steps {
                echo "üì• Checking out source code..."
                checkout scm
                script {
                    sh 'git fetch --tags'

                    // Try to get the latest Git tag
                    def gitTag = sh(returnStdout: true, script: "git describe --tags --abbrev=0 || echo ''").trim()
                    def commitHash = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()

                    // Determine image tag
                    if (params.OVERRIDE_TAG?.trim()) {
                        env.IMAGE_TAG = params.OVERRIDE_TAG
                        echo "üîñ Using override tag: ${env.IMAGE_TAG}"
                    } else if (gitTag) {
                        env.IMAGE_TAG = gitTag.startsWith('v') ? gitTag.substring(1) : gitTag
                        echo "üîñ Using Git tag as image tag: ${env.IMAGE_TAG}"
                    } else {
                        env.IMAGE_TAG = commitHash
                        echo "üîñ No Git tag found. Using commit hash as image tag: ${env.IMAGE_TAG}"
                    }

                    env.GIT_COMMIT_HASH = commitHash
                    env.GIT_BRANCH = sh(returnStdout: true, script: "git rev-parse --abbrev-ref HEAD").trim()
                }
            }
        }

        stage('üîß Build & Push Docker Image') {
            steps {
                script {
                    docker.withRegistry("https://index.docker.io/v1/", env.DOCKER_CREDENTIALS_ID) {
                        def imageName = "${env.DOCKER_HUB_USERNAME}/${env.CONTAINER_NAME}:${env.IMAGE_TAG}"
                        echo "üîß Building Docker image: ${imageName}"
                        def app = docker.build(imageName, "-f ${env.DOCKER_FILENAME} .")

                        echo "üì§ Pushing Docker image..."
                        app.push()
                        app.push("latest") // Optional: also push 'latest'
                        env.DOCKER_IMAGE = imageName

                        // Capture digest for email/report
                        env.DOCKER_DIGEST = sh(returnStdout: true, script: "docker inspect --format='{{index .RepoDigests 0}}' ${imageName}").trim()
                        echo "‚úÖ Docker image pushed: ${env.DOCKER_IMAGE} (${env.DOCKER_DIGEST})"
                    }
                }
            }
        }

        stage('üõ°Ô∏è Trivy Security Scan') {
            steps {
                script {
                    // Create a template for Trivy summary
                    writeFile file: 'trivy-summary.tpl', text: '''{{ range .Results }}
Target: {{ .Target }}
{{ if .Vulnerabilities }}
Vulnerabilities:
{{- range .Vulnerabilities }}
  - [{{ .Severity }}] {{ .PkgName }} {{ .InstalledVersion }} -> {{ .FixedVersion }}
{{- end }}
{{ else }}
No vulnerabilities found.
{{ end }}
{{ end }}'''

                    // Run Trivy scan
                    sh """
                        echo "üîç Running Trivy scan..."
                        trivy image --exit-code 0 --severity LOW,MEDIUM,HIGH,CRITICAL -f table -o trivy-report.txt ${env.DOCKER_IMAGE}
                        trivy image --exit-code 0 --severity LOW,MEDIUM,HIGH,CRITICAL --format template --template "@trivy-summary.tpl" -o trivy-summary.txt ${env.DOCKER_IMAGE}
                        echo "‚úÖ Trivy scan completed."
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                // Read summary safely
                def summary = ''
                if (fileExists('trivy-summary.txt')) {
                    summary = readFile('trivy-summary.txt').trim()
                } else {
                    summary = "No summary available"
                }

                emailext(
                    subject: "üõ°Ô∏è Docker Build + Security Scan Report: ${env.CONTAINER_NAME}:${env.IMAGE_TAG}",
                    body: """
                        <html>
                        <body style="font-family: Arial, sans-serif; color: #333;">
                            <h2 style="color: #2E86C1;">Docker Image Build & Security Scan Report</h2>
                            <table border="1" cellpadding="6" cellspacing="0" style="border-collapse: collapse; font-size: 14px;">
                                <tr><td><strong>Docker Image</strong></td><td>${env.DOCKER_IMAGE}</td></tr>
                                <tr><td><strong>Digest</strong></td><td>${env.DOCKER_DIGEST}</td></tr>
                                <tr><td><strong>Git Branch</strong></td><td>${env.GIT_BRANCH}</td></tr>
                                <tr><td><strong>Git Commit</strong></td><td>${env.GIT_COMMIT_HASH}</td></tr>
                            </table>
                            <h3 style="color: #C0392B; margin-top: 20px;">Trivy Vulnerability Summary:</h3>
                            <pre style="background-color: #F4F4F4; padding: 10px; border-radius: 4px; font-size: 13px;">
${summary}
                            </pre>
                        </body>
                        </html>
                    """,
                    mimeType: 'text/html',
                    to: "${env.RECIPIENT_EMAILS}",
                    attachLog: true,
                    attachmentsPattern: 'trivy-report.txt' // attach full Trivy report
                )
            }
        }
    }
}
